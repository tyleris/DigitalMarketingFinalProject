runApp('Dropbox (Personal)/*Dive/Prototype')
rm(tokenlist)
rm(tokenList)
rm("currentChar")
runApp('Dropbox (Personal)/*Dive/Prototype')
a<-list(1, 2)
b<-list(2, 4)
a<-list(1, 2)
b<-list(2, 4)
c<-list(a,b)
c<-list(c,a)
a<-list(1, 2)
b<-list(2, 4)
c<-list(a,b)
c<-paste(c,a)
a<-list(1, 2)
b<-list(2, 4)
d<-list(a,b)
d<-c(c,a)
a<-list(1, 2)
b<-list(2, 4)
d<-list(a,b)
d<-c(d,a)
makeToken <- function(type, value, length){
if (!(type %in% tokenTypes)) {
stop(cat("error making token: type must be one of:", paste(tokenTypes, collapse = ", "), "current token type is:", type))
} else {
#ToDo: Check that type is correct
structure(list("type" = type, "value" = value, "length" = length), class = "Token")
}
}
tokenTypes <- list("int" = "int", "operator" = "operator", "whitespace" = "whitespace", "eof" = "eof", "null" = "null")
t <- makeToken(type = tokenTypes$int,length = 1, value = 6)
tokenList <- list()
tokenList[i] <- t
i=1
tokenList[i] <- t
tokenList <- c(tokenList, list(t))
tokenList <- list(t)
tokenList <- c(tokenList, t)
tokenList <- list(t)
tokenList <- c(tokenList, list(t))
tokenList <- list()
tokenList <- c(tokenList, list(t))
tokenList <- c(tokenList, list(t))
runApp('Dropbox (Personal)/*Dive/Prototype')
rm(list = ls())
runApp('Dropbox (Personal)/*Dive/Prototype')
#eof means end of file (ie text line), no more tokens to tokenize
tokenTypes <- list("int" = "int", "operator" = "operator", "whitespace" = "whitespace", "eof" = "eof", "null" = "null")
operatorTypes <- list("+" = "+","-" = "-", "/" = "/","*" = "*", "^" = "^")
#Token class initializer
makeToken <- function(type, value, length){
if (!(type %in% tokenTypes)) {
stop(cat("error making token: type must be one of:", paste(tokenTypes, collapse = ", "), "current token type is:", type))
} else {
#ToDo: Check that type is correct
structure(list("type" = type, "value" = value, "length" = length), class = "Token")
}
}
t <- makeToken(type = tokenTypes$int,length = 1, value = 6)
tokenList <- list()
tokenList <- c(tokenList, list(t))
tokenList <- c(tokenList, list(t))
tokenList[1]
tokenList[[1]]
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
makeBox <- function(){
cnt <- 1
counter <- function(){
cnt = cnt + 1
print(cnt)
}
}
runCounter <- function(){
counter()
}
counter()
counter <- makeCounter()
makeCounter <- function(){
cnt <- 1
function(){
cnt = cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
return <- function(){
cnt = cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
return <- function(){
cnt <<- cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
counting <- function(){
cnt <<- cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
back <- 1
counting <- function(){
cnt <<- cnt + 1
print(cnt)
}
backing <- function(){
back <<- back - 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
counter[counting()]
counting()
cnt <- 1
count <- function(){
cnt <<- cnt + 1
print(cnt)
}
count()
count()
count()
count()
count()
makeTextTracker <- function(txt){
return(structure(list("text" = txt, pos = 0, currentChar = NULL), class = "TextTracker"))
}
tracker <<- makeTextTracker(rawText)
rawText <- "3+5"
tracker <<- makeTextTracker(rawText)
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
currentChar <- NULL
!is.na(as.numeric(currentChar)))
!is.na(as.numeric(currentChar))
as.numeric(currentChar)
is.na(as.numeric(currentChar)
)
!is.na(as.numeric(currentChar))
currentChar <- NULL
while (!is.na(as.numeric(currentChar))) {
print (currentChar)
currentChar <- "h"
}
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
shiny::runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
x <- NULL
is.null(x)
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
customerData = read.csv('High_Note_data.csv')
setwd("~/Dropbox (Personal)/-MIT Classes/Digital Marketing and social media analytics/Group Project Materials/DigitalMarketingFinalProject")
customerData = read.csv('High_Note_data.csv')
# remove non-numeric id column
drop = names(customerData) %in%  c('net_user')
customerData <- customerData[, !drop]
# Create new usage per month features
# TODO: how to deal w NAs?
customerData$playlistsPM = customerData$playlists / customerData$tenure
customerData$shoutsPM = customerData$shouts / customerData$tenure
customerData$postsPM = customerData$posts / customerData$tenure
customerData$lovedTracksPM = customerData$lovedTracks / customerData$tenure
customerData$songsListenedPM = customerData$songsListened / customerData$tenure
View(customerData)
# % of missing values
pMiss <- function(x){round(sum(is.na(x))/length(x),2)}
apply(customerData,2,pMiss)
# Plot missing values by row
library(VIM)
# % of missing values
pMiss <- function(x){round(sum(is.na(x))/length(x),2)}
apply(customerData,2,pMiss)
# Plot missing values by row
library(VIM)
# Plot missing values by row
install.packages("VIM")
library(VIM)
install.packages("pbkrtest")
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
customerData$delta2_shouts
customerData$other
# startup
# reset environment
rm(list=ls())
# Load Data
customerData = read.csv('High_Note_data.csv')
# remove non-numeric id column
drop = names(customerData) %in%  c('net_user')
# remove non-numeric id column
drop = names(customerData) %in%  c('net_user')
customerData <- customerData[, !drop]
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
# Create new usage per month features
# TODO: how to deal w NAs?
customerData$playlistsPM = customerData$playlists / customerData$tenure
customerData$shoutsPM = customerData$shouts / customerData$tenure
customerData$postsPM = customerData$posts / customerData$tenure
customerData$lovedTracksPM = customerData$lovedTracks / customerData$tenure
customerData$songsListenedPM = customerData$songsListened / customerData$tenure
# % of missing values
pMiss <- function(x){round(sum(is.na(x))/length(x),2)}
apply(customerData,2,pMiss)
# Plot missing values by row
library(VIM)
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
# drop delta2_shouts
customerData$delta2_shouts = NULL
# impute missing values
library(mice)
# male add new level - probably due to people choosing not specify gender
customerData[is.na(customerData$male),] = 3
table(customerData$male)
38950 / (25715 + 42548 + 38950)
# % of missing values
pMiss <- function(x){round(sum(is.na(x))/length(x),2)}
apply(customerData,2,pMiss)
length(customerData$age)
sum(is.na(customerData$age))
sum(is.na(customerData$age))/length(customerData$age)
View(customerData)
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(customerData), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.7, combined=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.3, prop=TRUE, combined=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.5, prop=TRUE, combined=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, prop=TRUE, combined=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.4, prop=TRUE, combined=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.4, prop=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.4, prop=TRUE, combined=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(customerData, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=TRUE, cex.axis=.4, prop=TRUE, combined=TRUE, bars=TRUE, gap=3, ylab=c("Histogram of missing data","Pattern"))
# add good country na as new level
table(customerData$good_country)
customerData[is.na(customerData$good_country)] = 4
customerData$good_country[is.na(customerData$good_country)] = 4
table(customerData$good_country)
# What percent rows have no NAs?
md.pattern(customerData)
# What percent rows have no NAs, only missing age, and other nas?
sum(complete.cases(customerData))
# What percent rows have no NAs, only missing age, and other nas?
sum(complete.cases(customerData))/length(customerData$adopter)
# What percent have only age missing?
sum(!complete.cases(customerData) && complete.cases(customerData[,'age']))
sum(!complete.cases(customerData))
sum(complete.cases(customerData[,'age']))
# What percent have only age missing?
sum(!complete.cases(customerData) & complete.cases(customerData[,'age']))
# What percent have only age missing?
sum(!complete.cases(customerData) & complete.cases(customerData[,'age'])) / length(customerData$adopter)
sum(complete.cases(customerData))
sum(!complete.cases(customerData) & complete.cases(customerData[,'age'])) / length(customerData$adopter)
sum(!complete.cases(customerData) & complete.cases(customerData[,'age']))
#Histogram of NAs per row
hist(apply(customerData, 1, function(x) sum(is.na(x))))
ggplot(d) + geom_histogram()
#Histogram of NAs per row
d <- apply(customerData, 1, function(x) sum(is.na(x)))
ggplot(d) + geom_histogram()
ggplot(d, aes(x = d)) + geom_histogram()
#Histogram of NAs per row
d <- as.dataframe(apply(customerData, 1, function(x) sum(is.na(x))))
#Histogram of NAs per row
d <- as.data_frame(apply(customerData, 1, function(x) sum(is.na(x))))
#Histogram of NAs per row
d <- as.data.frame(apply(customerData, 1, function(x) sum(is.na(x))))
#Histogram of NAs per row
d <- as.data.frame(apply(customerData, 1, function(x) sum(is.na(x))), nm = 'missing_value_count')
ggplot(d, aes(x = 'missing_value_count')) + geom_histogram()
ggplot(d, aes(x = 'missing_value_count'), stat='count') + geom_histogram()
ggplot(d, aes(x = 'missing_value_count')) + geom_histogram(stat='count')
hist(x = d, plot = TRUE)
hist(d, plot = TRUE)
#Histogram of NAs per row
d <- apply(customerData, 1, function(x) sum(is.na(x)))
hist(d, plot = TRUE)
hist(d, plot = TRUE,freq = TRUE)
hist(d, plot = TRUE,freq = FALSE)
table(d)
prop.table(table(d))
round(prop.table(table(d)),2)
apply(complete, 2, function(x) mean(x))
# Compare people with missing data to those that dont have it
complete <- customerData[complete.cases(customerData[,'age']),]
missing <- customerData[!complete.cases(customerData[,'age']),]
apply(complete, 2, function(x) mean(x))
View(complete)
complete.cases(customerData[,'age'])
# What percent have only age missing?
keep <- !(names(customerData) %in% c('age'))
sum(!complete.cases(customerData) & complete.cases(customerData[,keep])) / length(customerData$adopter)
sum(!complete.cases(customerData) & complete.cases(customerData[,-'age'])) / length(customerData$adopter)
# Compare people with missing data to those that dont have it
keep <- !(names(customerData) %in% c('age'))
complete <- customerData[complete.cases(customerData[,keep]),]
missing <- customerData[!complete.cases(customerData[,keep]),]
apply(complete, 2, function(x) mean(x))
apply(complete, 2, function(x) mean(x, na.rm = TRUE))
apply(complete, 2, function(x) mean(x, na.rm = TRUE))
apply(missing, 2, function(x) mean(x, na.rm = TRUE))
apply(missing, 2, function(x) round(mean(x, na.rm = TRUE),3))
apply(missing, 2, function(x) round(mean(x, na.rm = TRUE),1))
apply(missing, 2, function(x) round(mean(x, na.rm = TRUE),2))
apply(complete, 2, function(x) round(mean(x, na.rm = TRUE),2))
c <- apply(complete, 2, function(x) round(mean(x, na.rm = TRUE),2))
m <- apply(missing, 2, function(x) round(mean(x, na.rm = TRUE),2))
install.packages('gridExtra')
library(gridExtra)
tableGrob(c)
data.frame(columns=names(m),complete_rows=c,missing_rows=m)
data.frame(complete_rows=c,missing_rows=m)
tableGrob(df)
library(gridExtra)
grid.table(df)
df<-data.frame(complete_rows=c,missing_rows=m)
grid.table(df)
grid.table(df)
tableGrob(df)
chartCnt <- 1
saveChart <- function(chart){
pdf(file = 'chart'+chartCnt)
chart
dev.off()
chartCnt = chartCnt + 1
}
saveChart(grid.table(df))
chartCnt <- 1
saveChart <- function(chart){
pdf(file = paste('chart',chartCnt))
chart
dev.off()
chartCnt = chartCnt + 1
}
chartCnt <- 1
saveChart <- function(chart){
pdf(file = paste('chart',chartCnt))
chart
dev.off()
chartCnt = chartCnt + 1
}
saveChart(grid.table(df))
hist(d, plot = TRUE, freq = FALSE)
a<- hist(d, plot = TRUE, freq = FALSE)
chartCnt <- 1
saveChart <- function(chart){
pdf(file = paste('chart',chartCnt))
print(chart)
dev.off()
chartCnt = chartCnt + 1
}
saveChart(grid.table(df))
chartCnt <- 1
saveChart <- function(chartFnc, data){
pdf(file = paste('chart',chartCnt))
chartFnc(data)
dev.off()
chartCnt = chartCnt + 1
}
saveChart(grid.table, df)
chartCnt <- 1
saveChart <- function(chart){
pdf(file = paste('chart',chartCnt))
print(chart)
dev.off()
chartCnt = chartCnt + 1
}
#Histogram of NAs per row
d <- apply(customerData, 1, function(x) sum(is.na(x)))
round(prop.table(table(d)),2)
hist(d)
a <- hist(d)
saveChart(a)
d <- as.data.frame(d)
d <- as.data.frame(missing_value_count=d)
d <- data.frame(missing_value_count=d)
#Histogram of NAs per row
d <- apply(customerData, 1, function(x) sum(is.na(x)))
round(prop.table(table(d)),2)
df <- data.frame(missing_value_count=d)
a <- ggplot(df, aes(df$missing_value_count)) + geom_histogram()
saveChart(a)
ggsave('chart1', plot = a)
ggsave('chart1', plot = a, device = 'png')
ggsave('chart1.png', plot = a, device = 'png')
out <- grid.table(df)
out <- grid.table(df)
# Compare people with missing data to those that dont have it
keep <- !(names(customerData) %in% c('age'))
complete <- customerData[complete.cases(customerData[,keep]),]
missing <- customerData[!complete.cases(customerData[,keep]),]
c <- apply(complete, 2, function(x) round(mean(x, na.rm = TRUE),2))
m <- apply(missing, 2, function(x) round(mean(x, na.rm = TRUE),2))
df<-data.frame(complete_rows=c,missing_rows=m)
out <- grid.table(df)
ggsave('missingCompleteCompare.png', device = 'png')
ggsave(file = 'missingCompleteCompare.png', device = 'png',plot = out)
grid.arrange(out)
out <- tableGrob(df)
ggsave(file = 'missingCompleteCompare.png', device = 'png',plot = out)
out
grid.arrange(out)
tg = gridExtra::tableGrob(df)
h = grid::convertHeight(sum(tg$heights), "in", TRUE)
w = grid::convertWidth(sum(tg$widths), "in", TRUE)
ggplot2::ggsave("test.pdf", tg, width=w, height=h)
saveTable <- function(fileName, data){
tg = gridExtra::tableGrob(data)
h = grid::convertHeight(sum(tg$heights), "in", TRUE)
w = grid::convertWidth(sum(tg$widths), "in", TRUE)
ggplot2::ggsave(fileName, tg, width=w, height=h)
}
saveTable('tableMissingCompare.pdf', df)
