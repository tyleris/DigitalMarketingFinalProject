tt
tt$type
tt$value
tokenTypes$eof
detach(tokenTypes)
operatorTypes <- list("+" = "+","-" = "-", "/" = "/","*" = "*", "^" = "^")
f <- function(x){
return(x, 5)
f <- function(x){
return(x, 5)
}
f(2)
<- function(x){
return(x, 5)
}
f <- function(x){
return(x, 5)
}
f(2)
f <- function(x){
t <- (x, 5)
return(t)
}
f <- function(x){
t <- (x, 5)
return(t)
}
f <- function(x){
t <- list(x, 5)
return(t)
}
f(2)
(a, b) %=% list(5, 10)
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
makeToken <- function(type, value, length){
if (!(type %in% tokenTypes)) {
stop(cat("error: type must be one of: ", tokenTypes))
} else {
#ToDo: Check that type is correct
structure(list("type" = type, "value" = value, "length" = length), class = "Token")
}
}
interpret <- function(rawText){
#returns what type of output to show visual "VIZ" or text "TEXT" or "ERROR" and the parsed text
pos = 1
#not needed? currToken = makeToken(type = NULL, value = NULL, length = NULL)
result <- mathOperations(txt = rawText, pos = pos)
if (rawText == "hist(rnorm(10))"){
rtn <- c("VIZ", rawText)
} else {
#move pos up one if it works
rtn <- c("TEXT", result)
}
return(rtn)
}
getNextToken <- function(txt, pos){
#if end of line
if (pos > nchar(txt)){
t <- makeToken(type = "eof", value = NULL, length = NULL)
return(t)
}
#get current letter
currentChar <- substr(txt, pos, pos)
#integers
if (is.numeric(currentChar)) {
t <- makeToken(type = "int", value = currentChar, length = 1)
return(t)
}
#operators
if (currentChar %in% operatorTypes) {
t<- makeToken(type = "operator", value = currentChar, length = 1)
return(t)
}
#throw exception if no known token type
#stop(cat("parse error in getNextToken. no known type for: ", currentChar))
}
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
?as.numeric
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
a <- 1
c <- 4
b <- "+"
eval(a, parse(b), c)
eval(a, "+", c)
eval(cat(a, "+", c))
cat(a, "+", c)
eval(cat(a, "+", c))
eval(parse(cat(a, "+", c)))
x <- cat(a, "+", c))
x <- cat(a, "+", c)
parse(x)
x <- cat(a, "+", c)
x
x <- as.character(cat(a, "+", c))
x <- paste(a, "+", c))
x <- paste(a, "+", c))
x <- paste(a, "+", c)
x <- paste(a, "+", c)
parse(x)
eval(parse(x))
eval(x)
parse(text = x)
eval(parse(text = x))
runApp('Dropbox (Personal)/*Dive/Prototype')
tokenTypes <- list("int" = "int", "operator" = "operator", "whitespace" = "whitespace", "eof" = "eof")
a<- NULL
a<- paste(a, "r")
a
a<- ""
a<- paste(a, "r")
a
a<- ""
a<- paste(a, "2")
a
as.numeric(a)
txt <- "hello"
pos <- 5
currentChar <- substr(txt, pos, pos)
currentChar
pos <- 6
currentChar <- substr(txt, pos, pos)
currentChar
runApp('Dropbox (Personal)/*Dive/Prototype')
tokenTypes <- list("int" = "int", "operator" = "operator", "whitespace" = "whitespace", "eof" = "eof", "NULL" = "NULL")
cat(tokenTypes)
paste(tokenTypes)
paste)
?paste0
cat("error: type must be one of: ", paste(tokenTypes))
cat("error: type must be one of: ", paste(tokenTypes, sep = ", "))
cat("error: type must be one of:", paste(tokenTypes, sep = ", "))
paste(tokenTypes, sep = ", ")
cat("error: type must be one of:", paste(tokenTypes, sep = ", ", collapse = TRUE))
cat("error: type must be one of:", paste(tokenTypes, collapse = ", "))
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
rm(ls())
Q
rm(ls())
rm()
rm(list = ls())
Q
Q
Q
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
shiny::runApp('Dropbox (Personal)/*Dive/Prototype')
currentChar <- NA
!is.na(as.numeric(currentChar))
currentChar <- 5
!is.na(as.numeric(currentChar))
currentChar <- ""
!is.na(as.numeric(currentChar))
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
nchar(454)
runApp('Dropbox (Personal)/*Dive/Prototype')
tokenList <- list()
tokenList <- paste(tokenList, 4)
tokenList <- paste(tokenList, 4)
tokenList <- list()
tokenList <- c(tokenList, 4)
tokenList <- c(tokenList, 4)
tokenList <- c(tokenList, 4)
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
rm(tokenlist)
rm(tokenList)
rm("currentChar")
runApp('Dropbox (Personal)/*Dive/Prototype')
a<-list(1, 2)
b<-list(2, 4)
a<-list(1, 2)
b<-list(2, 4)
c<-list(a,b)
c<-list(c,a)
a<-list(1, 2)
b<-list(2, 4)
c<-list(a,b)
c<-paste(c,a)
a<-list(1, 2)
b<-list(2, 4)
d<-list(a,b)
d<-c(c,a)
a<-list(1, 2)
b<-list(2, 4)
d<-list(a,b)
d<-c(d,a)
makeToken <- function(type, value, length){
if (!(type %in% tokenTypes)) {
stop(cat("error making token: type must be one of:", paste(tokenTypes, collapse = ", "), "current token type is:", type))
} else {
#ToDo: Check that type is correct
structure(list("type" = type, "value" = value, "length" = length), class = "Token")
}
}
tokenTypes <- list("int" = "int", "operator" = "operator", "whitespace" = "whitespace", "eof" = "eof", "null" = "null")
t <- makeToken(type = tokenTypes$int,length = 1, value = 6)
tokenList <- list()
tokenList[i] <- t
i=1
tokenList[i] <- t
tokenList <- c(tokenList, list(t))
tokenList <- list(t)
tokenList <- c(tokenList, t)
tokenList <- list(t)
tokenList <- c(tokenList, list(t))
tokenList <- list()
tokenList <- c(tokenList, list(t))
tokenList <- c(tokenList, list(t))
runApp('Dropbox (Personal)/*Dive/Prototype')
rm(list = ls())
runApp('Dropbox (Personal)/*Dive/Prototype')
#eof means end of file (ie text line), no more tokens to tokenize
tokenTypes <- list("int" = "int", "operator" = "operator", "whitespace" = "whitespace", "eof" = "eof", "null" = "null")
operatorTypes <- list("+" = "+","-" = "-", "/" = "/","*" = "*", "^" = "^")
#Token class initializer
makeToken <- function(type, value, length){
if (!(type %in% tokenTypes)) {
stop(cat("error making token: type must be one of:", paste(tokenTypes, collapse = ", "), "current token type is:", type))
} else {
#ToDo: Check that type is correct
structure(list("type" = type, "value" = value, "length" = length), class = "Token")
}
}
t <- makeToken(type = tokenTypes$int,length = 1, value = 6)
tokenList <- list()
tokenList <- c(tokenList, list(t))
tokenList <- c(tokenList, list(t))
tokenList[1]
tokenList[[1]]
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
makeBox <- function(){
cnt <- 1
counter <- function(){
cnt = cnt + 1
print(cnt)
}
}
runCounter <- function(){
counter()
}
counter()
counter <- makeCounter()
makeCounter <- function(){
cnt <- 1
function(){
cnt = cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
return <- function(){
cnt = cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
return <- function(){
cnt <<- cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
counting <- function(){
cnt <<- cnt + 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
makeCounter <- function(){
cnt <- 1
back <- 1
counting <- function(){
cnt <<- cnt + 1
print(cnt)
}
backing <- function(){
back <<- back - 1
print(cnt)
}
}
counter <- makeCounter()
counter()
counter()
counter()
counter[counting()]
counting()
cnt <- 1
count <- function(){
cnt <<- cnt + 1
print(cnt)
}
count()
count()
count()
count()
count()
makeTextTracker <- function(txt){
return(structure(list("text" = txt, pos = 0, currentChar = NULL), class = "TextTracker"))
}
tracker <<- makeTextTracker(rawText)
rawText <- "3+5"
tracker <<- makeTextTracker(rawText)
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
currentChar <- NULL
!is.na(as.numeric(currentChar)))
!is.na(as.numeric(currentChar))
as.numeric(currentChar)
is.na(as.numeric(currentChar)
)
!is.na(as.numeric(currentChar))
currentChar <- NULL
while (!is.na(as.numeric(currentChar))) {
print (currentChar)
currentChar <- "h"
}
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
shiny::runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
x <- NULL
is.null(x)
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
runApp('Dropbox (Personal)/*Dive/Prototype')
setwd("~/Dropbox (Personal)/-MIT Classes/Digital Marketing and social media analytics/Group Project Materials/DigitalMarketingFinalProject")
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
saveTable <- function(fileName, data){
tg = gridExtra::tableGrob(data)
h = grid::convertHeight(sum(tg$heights), "in", TRUE)
w = grid::convertWidth(sum(tg$widths), "in", TRUE)
ggplot2::ggsave(fileName, tg, width=w, height=h)
}
############
# Load Data
##########
customerData = read.csv('High_Note_data.csv')
# remove non-numeric id column
drop = names(customerData) %in%  c('net_user')
customerData <- customerData[, !drop]
customerData$playlistsPM = customerData$playlists / customerData$tenure
customerData$shoutsPM = customerData$shouts / customerData$tenure
customerData$postsPM = customerData$posts / customerData$tenure
customerData$lovedTracksPM = customerData$lovedTracks / customerData$tenure
customerData$songsListenedPM = customerData$songsListened / customerData$tenure
customerData$subscriberFriendRatio <- customerData$subscriber_friend_cnt / customerData$friend_cnt
customerData$subscriberFriendRatio[customerData$friend_cnt == 0] <- 0
ageAndGen <- is.na(customerData$age) | is.na(customerData$male)
ageOrGen <- is.na(customerData$age) & is.na(customerData$male)
customerData$missingAgeAndGender <- customerData$age
customerData$missingAgeAndGender[ageAndGen] <- 1
customerData$missingAgeAndGender[!ageAndGen] <- 0
customerData$missingAgeOrGender <- customerData$age
customerData$missingAgeOrGender[ageOrGen] <- 1
customerData$missingAgeOrGender[!ageOrGen] <- 0
# drop delta2_shouts
customerData$delta2_shouts = NULL
# add good country na as new level
table(customerData$good_country)
customerData$good_country[is.na(customerData$good_country)] = 3
table(customerData$good_country)
rm(list=ls())
setwd("~/Dropbox (Personal)/-MIT Classes/Digital Marketing and social media analytics/Group Project Materials/DigitalMarketingFinalProject")
library(ggplot2)
library(reshape2)
library(plyr)
library(dplyr)
library(gridExtra)
custData <- read.csv('High_Note_Data_Imputed.csv')
# Drop all period 2 columns
drop <- c('delta2_friend_cnt', 'delta2_avg_friend_age','delta2_avg_friend_male','delta2_friend_country_cnt','delta2_subscriber_friend_cnt','delta2_songslisted','delta2_lovedTracks','delta2_posts','delta2_playlists', 'delta2_good_country')
temp <- customerData[, !(names(customerData) %in% drop)]
temp <- custrData[, !(names(custData) %in% drop)]
# Drop all period 2 columns
drop <- c('delta2_friend_cnt', 'delta2_avg_friend_age','delta2_avg_friend_male','delta2_friend_country_cnt','delta2_subscriber_friend_cnt','delta2_songslisted','delta2_lovedTracks','delta2_posts','delta2_playlists', 'delta2_good_country')
temp <- custData[, !(names(custData) %in% drop)]
# Create test and train data
split = sample.split(temp$adopter, SplitRatio = 0.7)
# Create test and train data
install.packages('caTools')
# Create test and train data
install.packages('caTools')
# Create test and train data
install.packages('caTools')
# Create test and train data
install.packages('caTools')
# Create test and train data
install.packages('caTools')
# Create test and train data
install.packages('caTools')
